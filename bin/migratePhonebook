#!/usr/bin/env python
#
#     Script for migrating Zarafa and Phonebook attributes from eDirectory to AD
#     Bob Brandt <projects@brandt.ie>
#   

import ldap, ldap.sasl, base64, sys

class LDAPSearch():
    """Class to encapsulate LDAP Searching"""

    URI = property(     fget = lambda self: self.__URI, 
                        fset = lambda self, URI: setattr(self, "__URI", str(URI) ))
    BaseDN = property(  fget = lambda self: self.__BaseDN, 
                        fset = lambda self, BaseDN: setattr(self, "__BaseDN", str(BaseDN) ))
    UserDN = property(  fget = lambda self: self.__UserDN, 
                        fset = lambda self, UserDN: setattr(self, "__UserDN", str(UserDN) ))
    Password = property(fget = lambda self: self.__Password, 
                        fset = lambda self, Password: setattr(self, "__Password", str(Password) ))
    SSL = property(     fget = lambda self: self.__SSL, 
                        fset = lambda self, SSL: setattr(self, "__SSL", bool(SSL) ))
    Version = property( fget = lambda self: self.__Version, 
                        fset = lambda self, Version: setattr(self, "__Version", int(Version) if int(Version) in [2,3] else 3 ))
    Debug = property(   fget = lambda self: self.__Debug, 
                        fset = lambda self, Debug: setattr(self, "__Debug", int(Debug) if int(Debug) in range(256) else 0 ))
    Trace = property(   fget = lambda self: self.__Trace, 
                        fset = lambda self, Trace: setattr(self, "__Trace", int(Trace) if int(Trace) in range(10) else 0 ))
    Scope = property(   fget = lambda self: self.__Scope, 
                                fset = lambda self, Scope: setattr(self, "__Scope", str(Scope).lower() if str(Scope).lower() in ["one", "base", "sub"] else "sub" ))
    Filter = property(  fget = lambda self: self.__Filter, 
                        fset = lambda self, Filter: setattr(self, "__Filter", str(Filter) ))
    Attributes = property(  fget = lambda self: self.__Attributes, 
                            fset = lambda self, Attributes: setattr(self, "__Attributes", set(Attributes) ))
    isOpen = property(  fget = lambda self: (self.__LDAP != None) )
    PageSize = property( fget = lambda self: self.__PageSize, 
                        fset = lambda self, PageSize: setattr(self, "__PageSize", int(PageSize) ))

    def __init__(self, URI = "", UserDN = "", Password = "", TLS = False, Version = 3, Debug = 0, Trace = 0, PageSize = 1000):
        self.URI = URI
        self.UserDN = UserDN
        self.Password = Password
        self.TLS = TLS
        self.Version = Version
        self.Debug = Debug
        self.Trace = Trace
        self.__BaseDN = ""
        self.Scope = "sub"
        self.Filter = "(objectClass=*)"
        self.Attributes = []
        self.__LDAP = None
        self.__PageSize = int(PageSize)

    def __str__(self):
        tmp  = "URI      = " + str(self.URI) + "\n"
        tmp += "BaseDN   = " + str(self.BaseDN) + "\n"
        tmp += "UserDN   = " + str(self.UserDN) + "\n"
        tmp += "Password = " + str(self.Password) + "\n"
        tmp += "TLS      = " + str(self.TLS) + "\n"
        tmp += "Version  = " + str(self.Version) + "\n"
        tmp += "Debug    = " + str(self.Debug) + "\n"
        tmp += "isOpen   = " + str(self.isOpen) + "\n"
        tmp += "Filter   = " + str(self.Filter) + "\n"
        tmp += "PageSize = " + str(self.PageSize) + "\n"
        tmp += "Scope    = " + str(self.Scope) + "\n"
        tmp += "Attributes  = " + str(self.Attributes)
        return tmp

    def __del__(self):
        if self.isOpen: self.Close()   

    def Open(self):
        if not self.URI:
            raise ValueError, "You need to specify a valid LDAP URI."
        ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
        ldap.set_option( ldap.OPT_REFERRALS, 0 )
        ldap.set_option( ldap.OPT_PROTOCOL_VERSION, self.Version )
        ldap.set_option( ldap.OPT_X_TLS_DEMAND, False )
        ldap.set_option( ldap.OPT_DEBUG_LEVEL, self.Debug)

        self.__LDAP = ldap.initialize(self.URI, trace_level=self.Trace)
        if self.TLS:
            self.__LDAP.start_tls_s()
        self.__LDAP.bind_s( self.UserDN, self.Password, ldap.AUTH_SIMPLE )

        self.__lc = ldap.controls.SimplePagedResultsControl(criticality=True, size=self.PageSize, cookie='')



    def Close(self):
        if self.isOpen: 
            self.__LDAP.unbind_s()
        self.__LDAP = None

    def Search(self, BaseDN="", Scope="sub", Filter = "", Attributes = set([])):
        if BaseDN: self.BaseDN = BaseDN
        if Scope: self.Scope = Scope
        if Filter: self.Filter = Filter
        if Attributes: self.Attributes = Attributes
        if not self.isOpen: self.Open()

        tmp = self.__LDAP.search_ext_s(base = self.BaseDN, 
                                   scope = {"base":ldap.SCOPE_BASE, "one" :ldap.SCOPE_ONELEVEL, "sub" :ldap.SCOPE_SUBTREE}[self.Scope], 
                                   filterstr = self.Filter, 
                                   attrlist = list(self.Attributes),  
                                   attrsonly = 0,
                                   sizelimit = self.PageSize,
                                   serverctrls=[self.__lc] )
        return dict(tmp)

attributes={ "cn":("cn","sAMAccountName"),
             "country":("co","co"),
             "company":("company","company"),
             "comment":("comment","info"),
             "description":("description","description"),             
             "fax":("faxsimileTelephoneNumber","faxsimileTelephoneNumber"),
             "fullName":("fullName","displayName"),
             "givenName":("givenName","givenName"),
             "homePhone":("homePhone","homePhone"),
             "initials":("initials","initials"),
             "jpegPhoto":("jpegPhoto","thumbnailPhoto"),
             "location":("l","physicalDeliveryOfficeName"),
             "mail":("mail","mail"),
             "mobile":("mobile","mobile"),
             "section":("ou","department"),
             "pager":("pager","pager"),
             "personalTitle":("personalTitle","personalTitle"),
             "city":("physicalDeliveryOfficeName","l"),
             "postOfficeBox":("postOfficeBox","postOfficeBox"),
             "postalCode":("postalCode","postalCode"),
             "surname":("sn","sn"),
             "state":("st","st"),
             "staffNumber":("staffNumber","employeeID"),
             "street":("street","streetAddress"),
             "telephoneNumber":("telephoneNumber","telephoneNumber"),
             "title":("title","title"),
             "zarafaAccount":("zarafaAccount","zarafaAccount"),
             "zarafaAdmin":("zarafaAdmin","zarafaAdmin"),
             "zarafaAdminPrivilege":("zarafaAdminPrivilege","zarafaAdminPrivilege"),
             "zarafaAliases":("zarafaAliases","otherMailbox"),
             "zarafaBase":("zarafaBase","zarafaBase"),             
             "zarafaDisabledFeatures":("zarafaDisabledFeatures","zarafaDisabledFeatures"),
             "zarafaEnabledFeatures":("zarafaEnabledFeatures","zarafaEnabledFeatures"),
             "zarafaFilter":("zarafaFilter","zarafaFilter"),             
             "zarafaHidden":("zarafaHidden","zarafaHidden"),
             "zarafaQuotaHard":("zarafaQuotaHard","zarafaQuotaHard"),
             "zarafaQuotaOverride":("zarafaQuotaOverride","zarafaQuotaOverride"),
             "zarafaQuotaSoft":("zarafaQuotaSoft","zarafaQuotaSoft"),
             "zarafaQuotaWarn":("zarafaQuotaWarn","zarafaQuotaWarn"),
             "zarafaResourceCapacity":("zarafaResourceCapacity","zarafaResourceCapacity"),
             "zarafaResourceType":("zarafaResourceType","zarafaResourceType"),
             #"zarafaSecurityGroup":("zarafaSecurityGroup","zarafaSecurityGroup"),             
             "zarafaSendAsPrivledge":("zarafaSendAsPrivledge","zarafaSendAsPrivledge"),
             "zarafaSharedStoreOnly":("zarafaSharedStoreOnly","zarafaSharedStoreOnly"),
             "zarafaUserArchiveCoupling":("zarafaUserArchiveCoupling","zarafaUserArchiveCoupling"),
             "zarafaUserArchiveServers":("zarafaUserArchiveServers","zarafaUserArchiveServers"),
             "zarafaUserServer":("zarafaUserServer","zarafaUserServer"),
             "zarafaCompanyServer":("zarafaCompanyServer","zarafaCompanyServer"),
             "zarafaQuotaCompanyWarningRecipie":("zarafaQuotaCompanyWarningRecipie","zarafaQuotaCompanyWarningRecipie"),
             "zarafaQuotaUserWarningRecipients":("zarafaQuotaUserWarningRecipients","zarafaQuotaUserWarningRecipients"),
             "zarafaSystemAdmin":("zarafaSystemAdmin","zarafaSystemAdmin"),
             "zarafaUserDefaultQuotaHard":("zarafaUserDefaultQuotaHard","zarafaUserDefaultQuotaHard"),
             "zarafaUserDefaultQuotaOverride":("zarafaUserDefaultQuotaOverride","zarafaUserDefaultQuotaOverride"),
             "zarafaUserDefaultQuotaSoft":("zarafaUserDefaultQuotaSoft","zarafaUserDefaultQuotaSoft"),
             "zarafaUserDefaultQuotaWarn":("zarafaUserDefaultQuotaWarn","zarafaUserDefaultQuotaWarn"),
             "zarafaViewPrivilege":("zarafaViewPrivilege","zarafaViewPrivilege"),
             "zarafaContainsPublic":("zarafaContainsPublic","zarafaContainsPublic"),
             "zarafaFilePath":("zarafaFilePath","zarafaFilePath"),
             "zarafaHttpPort":("zarafaHttpPort","zarafaHttpPort"),
             "zarafaSslPort":("zarafaSslPort","zarafaSslPort"),
             "member":("member","member"),
              }


eDirBaseDN="ou=it,o=opw"
ADBaseDN="ou=it,ou=opw,dc=i,dc=opw,dc=ie"

eDirBaseDN="o=opw"
ADBaseDN="ou=opw,dc=i,dc=opw,dc=ie"

edir = LDAPSearch(URI = "ldap://ldap.i.opw.ie/", UserDN = 'CN=brandtb,OU=IT,O=opw', Password = "P0gmothoin", TLS = False, Version = 3, Debug = 0, Trace = 0)
edir.PageSize = 2000
ad   = LDAPSearch(URI = "ldaps://i.opw.ie/", UserDN = 'CN=Bob Brandt,OU=IT,OU=opw,DC=i,DC=opw,DC=ie', Password = "P0gmothoin", TLS = False, Version = 3, Debug = 0, Trace = 0)
ad.PageSize = 2000

eUser = edir.Search(BaseDN=eDirBaseDN, Scope="sub", Filter = "(objectClass=person)", Attributes = [a[0] for a in attributes.values() ])
aUser = ad.Search(BaseDN="OU=Dublin," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ])
aUser.update( ad.Search(BaseDN="OU=East," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=HeadOffice," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=IT," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=South," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=StephensGreen," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=Web," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=West," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=zarafa," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )
aUser.update( ad.Search(BaseDN="OU=RemoteAccess," +ADBaseDN, Scope="sub", Filter = "(&(objectClass=person)(!(objectClass=computer)))", Attributes = [a[1] for a in attributes.values() ]) )

eGroup = edir.Search(BaseDN=eDirBaseDN, Scope="sub", Filter = "(&(objectClass=group)(|(zarafaAccount=1)(instantMessaging=True)))", Attributes = [a[0] for a in attributes.values() ])
aGroup = ad.Search(BaseDN=ADBaseDN, Scope="sub", Filter = "(objectClass=group)", Attributes = [a[1] for a in attributes.values() ])


# Combine Users
User = {}
for record in eUser.keys():
    cn = str(record).split(",")[0].split("=")[1].strip().lower()
    User[cn] = {}
    User[cn]["account"] = {"edir":record, "ad":""}
    for attr in attributes.keys():
        if eUser[record].has_key(attributes[attr][0]):
            User[cn][attr] = {"edir":sorted(eUser[record][attributes[attr][0]]), "ad":[]}

for record in aUser.keys():
    cn = aUser[record]["sAMAccountName"][0].lower()
    if User.has_key(cn):
        User[cn]["account"]["ad"] = record
    else:
        User[cn] = {}
        User[cn]["account"] = {"edir":"", "ad":record}

    for attr in attributes.keys():
        if aUser[record].has_key(attributes[attr][1]):
            if not User[cn].has_key(attr): User[cn][attr] = {"edir":[]}
            User[cn][attr]["ad"] = sorted(aUser[record][attributes[attr][1]])

# Remove attributes that are already the same
UserMap={}
for record in User.keys():
    UserMap[User[record]["account"]["edir"]] = User[record]["account"]["ad"]
    for attr in User[record].keys():
        if User[record][attr]["edir"] == User[record][attr]["ad"]:
            del User[record][attr]



# Combine Groups
Group = {}
for record in eGroup.keys():
    cn = str(record).split(",")[0].split("=")[1].strip().lower()
    Group[cn] = {}
    Group[cn]["account"] = {"edir":record, "ad":""}
    for attr in attributes.keys():
        if eGroup[record].has_key(attributes[attr][0]):
            Group[cn][attr] = {"edir":sorted(eGroup[record][attributes[attr][0]]), "ad":[]}

for record in aGroup.keys():
    cn = str(record).split(",")[0].split("=")[1].strip().lower()
    if Group.has_key(cn):
        Group[cn]["account"]["ad"] = record

        for attr in attributes.keys():
            if aGroup[record].has_key(attributes[attr][1]):
                if not Group[cn].has_key(attr): Group[cn][attr] = {"edir":[]}
                Group[cn][attr]["ad"] = sorted(aGroup[record][attributes[attr][1]])

# Remove attributes that are already the same
for record in Group.keys():
    for attr in Group[record].keys():
        if Group[record][attr]["edir"] == Group[record][attr]["ad"]:
            del Group[record][attr]

# Print LDIF File
adOnlyUsers = []
eDirOnlyUsers = []
for record in User.keys():#
    if not User[record]["account"]["edir"] and User[record]["account"]["ad"]:
        adOnlyUsers.append("# The user " + str(User[record]["account"]["ad"]) + " does not have an eDirectory account")
    elif User[record]["account"]["edir"] and not User[record]["account"]["ad"]:
        eDirOnlyUsers.append("# The user " + str(User[record]["account"]["edir"]) + " does not have an Active Directory account")
    elif len(set(User[record].keys()).difference(["account","cn","objectClass"])) > 0:
        print "# " + record
        print "# User"
        print "dn: " + User[record]["account"]["ad"]
        print "changetype: modify"
        for attr in User[record].keys():
            if attr not in ["account","cn","objectClass"]:
                if attr in ["jpegPhoto"]:
                    print "replace: " + attributes[attr][1]
                    print attributes[attr][1] + ":: " + base64.b64encode(User[record][attr]["edir"][0])
                    print "-"
                elif len(User[record][attr]["edir"]) == 1 and len(User[record][attr]["ad"]) < 2:
                    print "replace: " + attributes[attr][1]
                    print attributes[attr][1] + ": " + str(User[record][attr]["edir"][0])
                    print "-"                    
                elif len(User[record][attr]["edir"]) < 1:
                    print "delete: " + attributes[attr][1]
                    print "-"
                elif len(User[record][attr]["edir"]) > 1:
                    if User[record][attr]["ad"]:
                        print "delete: " + attributes[attr][1]
                        print "-"
                    else:
                        print "# delete: " + attributes[attr][1]
                    print "add: " + attributes[attr][1]
                    for value in User[record][attr]["edir"]:
                        print attributes[attr][1] + ": " + value
                    print "-"
        print
    else:
        print "# " + record + " (No Changes)"
        print "# User"
        print


eDirOnlyGroups = []
for record in Group.keys():#
    if Group[record]["account"]["edir"] and not Group[record]["account"]["ad"]:
        eDirOnlyGroups.append("# The group " + str(Group[record]["account"]["edir"]) + " does not exist in Active Directory")
    elif len(set(Group[record].keys()).difference(["account","cn","member","objectClass"])) > 0:
        print "# " + record
        print "# Group"
        print "dn: " + Group[record]["account"]["ad"]
        print "changetype: modify"
        for attr in Group[record].keys():
            if attr not in ["account","cn","member","objectClass"]:
                if attr in ["jpegPhoto"]:
                    print "replace: " + attributes[attr][1]
                    print attributes[attr][1] + ":: " + base64.b64encode(Group[record][attr]["edir"][0])
                    print "-"
                elif len(Group[record][attr]["edir"]) == 1 and len(Group[record][attr]["ad"]) < 2:
                    print "replace: " + attributes[attr][1]
                    print attributes[attr][1] + ": " + str(Group[record][attr]["edir"][0])
                    print "-"                    
                elif len(Group[record][attr]["edir"]) < 1:
                    print "delete: " + attributes[attr][1]
                    print "-"
                elif len(Group[record][attr]["edir"]) > 1:
                    if Group[record][attr]["ad"]:
                        print "delete: " + attributes[attr][1]
                        print "-"
                    else:
                        print "#delete: " + attributes[attr][1]
                    print "add: " + attributes[attr][1]
                    for value in Group[record][attr]["edir"]:
                        print attributes[attr][1] + ": " + value
                    print "-"
        print
    else:
        print "# " + record + " (No Changes)"
        print "# Group"
        print

print
print "\n".join(adOnlyUsers)
print
print "\n".join(eDirOnlyUsers)
print
print "\n".join(eDirOnlyGroups)

# fix member DNs
for record in Group.keys():
    if Group[record].has_key("member"):
        tmp = []
        for member in Group[record]["member"]["edir"]:
            if UserMap.has_key(member):
                tmp.append(UserMap[member])
            else:
                tmp.append(member.lower().replace(',o=opw',',ou=opw,dc=i,dc=opw,dc=ie'))
        Group[record]["member"]["edir"] = sorted(set(tmp))
        Group[record]["member"]["ad"] = sorted(set(Group[record]["member"]["ad"]))

for record in Group.keys():
    print
    print "# Membership for " + record + "  (" + Group[record]["account"]["ad"] + ")"    
    if Group[record].has_key("member") and Group[record]["member"]["edir"] != Group[record]["member"]["ad"]:
        l = max(len(Group[record]["member"]["edir"]),len(Group[record]["member"]["ad"]))
        width = max([ len(x) for x in Group[record]["member"]["edir"] ] + [ len(x) for x in Group[record]["member"]["ad"] ])
        print "#", "eDirectory(translated)".center(width), "Active Directory".center(width)
        for i in range(l):
            try:
                tmp1 = Group[record]["member"]["edir"][i]
            except:
                tmp1 = ""
            try:
                tmp2 = Group[record]["member"]["ad"][i]
            except:
                tmp2 = ""

            print "#", tmp1.ljust(width), ";", tmp2
